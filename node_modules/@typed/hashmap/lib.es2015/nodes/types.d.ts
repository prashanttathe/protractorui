export declare type Node<K, V> = Empty<K, V> | Leaf<K, V> | Collision<K, V> | Indexed<K, V> | ListNode<K, V>;
export declare type Modify<K, V> = (shift: number, get: (value?: V) => V, hash: number, key: K, size: {
    value: number;
}) => Node<K, V>;
export declare type ChildNode<K, V> = Empty<K, V> | Leaf<K, V>;
export declare type ChildrenNodes<K, V> = Array<ChildNode<K, V>>;
export interface Empty<K, V> {
    type: NodeType.EMPTY;
    modify: Modify<K, V>;
}
export interface Leaf<K, V> {
    type: NodeType.LEAF;
    hash: number;
    key: K;
    value: V;
    modify: Modify<K, V>;
}
export interface Collision<K, V> {
    type: NodeType.COLLISION;
    hash: number;
    children: Array<Leaf<K, V>>;
    modify: Modify<K, V>;
}
export interface Indexed<K, V> {
    type: NodeType.INDEX;
    mask: number;
    children: ChildrenNodes<K, V>;
    modify: Modify<K, V>;
}
export interface ListNode<K, V> {
    type: NodeType.ARRAY;
    size: number;
    children: Array<Node<K, V>>;
    modify: Modify<K, V>;
}
export declare const enum NodeType {
    EMPTY = 0,
    LEAF = 1,
    COLLISION = 2,
    INDEX = 3,
    ARRAY = 4,
}
