import { empty } from '../EmptyNode';
import { SIZE, MIN_ARRAY_NODE, replace, hashFragment } from '../../common';
import { toIndexNode } from './toIndexNode';
var ArrayNode = (function () {
    function ArrayNode(size, children) {
        this.type = 4 /* ARRAY */;
        this.size = size;
        this.children = children;
    }
    ArrayNode.prototype.modify = function (shift, get, hash, key, size) {
        var _a = this, count = _a.size, children = _a.children;
        var fragment = hashFragment(shift, hash);
        var child = children[fragment];
        var newChild = (child || empty()).modify(shift + SIZE, get, hash, key, size);
        if (child === newChild)
            return this;
        if (isEmptyNode(child) && !isEmptyNode(newChild))
            return new ArrayNode(count + 1, replace(fragment, newChild, children));
        if (!isEmptyNode(child) && isEmptyNode(newChild))
            return count - 1 <= MIN_ARRAY_NODE
                ? toIndexNode(count, fragment, children)
                : new ArrayNode(count - 1, replace(fragment, empty(), children));
        return new ArrayNode(count, replace(fragment, newChild, children));
    };
    return ArrayNode;
}());
export { ArrayNode };
function isEmptyNode(node) {
    return node && node.type === 0 /* EMPTY */;
}
//# sourceMappingURL=ArrayNode.js.map