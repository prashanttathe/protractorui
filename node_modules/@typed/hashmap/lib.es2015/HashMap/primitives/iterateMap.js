export function iterator(node, f) {
    return new HashMapIterator(lazyVisit(node, f, []));
}
var HashMapIterator = (function () {
    function HashMapIterator(_iterate) {
        this._iterate = _iterate;
    }
    HashMapIterator.prototype.next = function () {
        if (!this._iterate)
            return { done: true, value: null };
        var _a = this._iterate, value = _a.value, rest = _a.rest;
        this._iterate = continuation(rest);
        return { done: false, value: value };
    };
    HashMapIterator.prototype[Symbol.iterator] = function () {
        return this;
    };
    return HashMapIterator;
}());
var continuation = function (k) {
    return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);
};
function lazyVisit(node, f, k) {
    switch (node.type) {
        case 1 /* LEAF */:
            return { value: f(node), rest: k };
        case 2 /* COLLISION */:
        case 4 /* ARRAY */:
        case 3 /* INDEX */:
            var children = node.children;
            return lazyVisitChildren(children.length, children, 0, f, k);
        default:
            return continuation(k);
    }
}
;
function lazyVisitChildren(length, children, index, f, k) {
    while (index < length) {
        var child = children[index++];
        if (child && notEmptyNode(child))
            return lazyVisit(child, f, [length, children, index, f, k]);
    }
    return continuation(k);
}
;
function notEmptyNode(node) {
    return node && node.type !== 0 /* EMPTY */;
}
//# sourceMappingURL=iterateMap.js.map