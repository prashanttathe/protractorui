import { default as isEqual } from 'lodash-es/isEqual';
import { SIZE, hashFragment, toBitmap, bitmapToIndex } from '../../common';
import { getNode } from './getNode';
/**
 * Tries to find the value of a hash and key in a HashMap
 */
export function getHash(defaultValue, hash, key, map) {
    var node = getNode(map);
    var shift = 0;
    while (true)
        switch (node.type) {
            case 1 /* LEAF */:
                return isEqual(key, node.key)
                    ? node.value
                    : defaultValue;
            case 2 /* COLLISION */: {
                if (hash === node.hash) {
                    var children = node.children;
                    for (var i = 0; i < children.length; ++i) {
                        var child = children[i];
                        if (isEqual(key, child.key))
                            return child.value;
                    }
                    return defaultValue;
                }
            }
            case 3 /* INDEX */: {
                var fragment = hashFragment(shift, hash);
                var bit = toBitmap(fragment);
                if (node.mask & bit) {
                    var i = bitmapToIndex(node.mask, bit);
                    node = node.children[i];
                    shift += SIZE;
                    break;
                }
                return defaultValue;
            }
            case 4 /* ARRAY */: {
                node = node.children[hashFragment(shift, hash)];
                if (node) {
                    shift += SIZE;
                    break;
                }
                return defaultValue;
            }
            default: return defaultValue;
        }
}
//# sourceMappingURL=getHash.js.map